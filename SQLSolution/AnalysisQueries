## ðŸ¤© Queries

### 1. Write a query to print top 5 cities with highest spends and their percentage contribution of total credit card spends. 

````sql
SELECT TOP 5 city,SUM(amount) AS City_Total_Spend, 
CONCAT((ROUND((100.0*SUM(Amount)/(SELECT SUM(Amount) FROM Credit_Card_Transactions)),2)),'%') AS City_Spend_Percentage
FROM Credit_Card_Transactions
GROUP BY city
ORDER BY 2 DESC;
````

### 2. Write a query to print highest spend month and amount spent in that month for each card type.

````sql
WITH Total_Spend_Details AS
(
SELECT card_type,txn_yr,txn_mth, SUM(amount) AS Total_Spend
FROM
(SELECT *, DATEPART(Year,transaction_date) AS txn_yr, DATEPART(Month,transaction_date) AS txn_mth
FROM Credit_Card_Transactions) AS calendar
GROUP BY card_type,txn_yr,txn_mth),
Rankings AS
(
SELECT *, RANK() OVER (PARTITION BY card_type ORDER BY Total_Spend DESC) AS Ranks.
FROM Total_Spend_Details
)
SELECT*FROM Rankings
WHERE Ranks=1;
````

### 3. write a query to print the transaction details (i.e. all the columns from the table) for each card type when it reaches a cumulative of 1000000 total spends.

````sql
WITH Running_Spends AS 
(
SELECT *,SUM(amount) OVER (PARTITION BY card_type ORDER BY transaction_date,transaction_id) 
AS Total_Spend
FROM Credit_Card_Transactions
),
Ranks AS 
(
SELECT *, DENSE_RANK() OVER (PARTITION BY card_type ORDER BY Total_Spend) AS Ranking
FROM Running_Spends
WHERE Total_Spend>=1000000
)
SELECT * FROM Ranks
WHERE transaction_id IN (SELECT transaction_id FROM Ranks WHERE Ranking=1);
````

### 4. Display duplicate rows present in the table.

We will solve this by two techniques:

Technique 1 - SIMPLE APPROACH
````sql
SELECT ds, job_id, actor_id, org, count(*) AS occurences
FROM job_data
GROUP BY ds, job_id, actor_id, org
HAVING occurences>1;
````

Technique 2 - WITH CLAUSE
````sql
WITH duplicate_check as
(SELECT *,
ROW_NUMBER() OVER (PARTITION BY ds, job_id, actor_id) as row_occurence 
FROM job_data)

SELECT * FROM duplicate_check WHERE row_occurence >1;
````
